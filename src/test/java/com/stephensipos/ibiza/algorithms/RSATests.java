package com.stephensipos.ibiza.algorithms;

import org.junit.jupiter.api.Test;

import java.math.BigInteger;

import static java.math.BigInteger.ONE;
import static java.math.BigInteger.valueOf;
import static org.junit.jupiter.api.Assertions.*;

public class RSATests {

    private class KeySet {
        private final BigInteger pk, sk, modulus;
        KeySet(String pk, String sk, String modulus) {
            this.pk = new BigInteger(pk);
            this.sk = new BigInteger(sk);
            this.modulus = new BigInteger(modulus);
        }

        public BigInteger getPk() {
            return pk;
        }

        public BigInteger getSk() {
            return sk;
        }

        public BigInteger getModulus() {
            return modulus;
        }
    }

    private KeySet[] keySets = new KeySet[] {
        new KeySet("5", "4871052425695138733", "6088815537077546459"), /* 32 */
        new KeySet("7", "133131733298892474724530364194009909253615680047253232517398490392898858110869022293102801755423478646671125221361610241943877218338234049315995512749074328463471793813333310941124654009036742893204749204013006187357597910684764992951657052214551284212285518332053554086842211559770694746979953056256662430784187696664232411850252511118310186672403119644073083648278975095398506088294002375856974809033380224876439759793521453153891529569088034399036407238919508029869863722513068608725550228352301894995873925316684735574821375896211341821635754665207393328747772049724430215237185019283471885631919322700935612993846684768904510864185657457819054690068776664738310893173724712704535745402379042227276776155028765252989549504894260647024671631912212992587229133256147785543993753680753416960374005792519995709955115772580985107747418246428022363588474271459585102585266870834367165780296998322615631570659651376973074554857032437295387976431945689310765520955811655803507015716612156325555850649202020561334682164411571310700635551731091647542145150448013221049187939727020750586873641725288269674774206063424828301487180034002134333933267283996488967837524108468222501587430355483882944202543162872209684311754624809493348863989943", "465961066546123661535856274679034682387654880165386313810894716375146003388041578025859806143982175263348938274765635846803570264183819172605984294621760149622151278346666588293936289031628600126216622214045521655751592687396677475330799682750929494742999314162187439303947740459197431614429835696898318507744656938324813441475883788914085653353410918754255792768976412833894771309029008315499411831616830787067539159277325086038620353491808120396627425336218278104544523028795740130539425799233056632485558738608396574511874815636739696375725141328225876650617202174035505753330147567492151599711717629453274645478506748866694905342129559099348718163378652387741734637384180879052804110523701998547316986222909260835990919777776644622402829089165715186769745343938087882105003063217387983244880883387662300776717810579687313547876448396571054183726950064043857893825741231532215065152129116636755804908466227570133387362278396810746025433463121787312396921606347671889736834438828491623127921909606947767966797459630626898506589597984021033780961092052533921558762684089189356032940728819622266887010472004400225776131229155315318820520307868969060636502455562482580937912526091745603409557828856302693885147247824495262638906161711") /* 2048 */
    };

    private final BigInteger[] messages = new BigInteger[] {
            new BigInteger("test".getBytes()),
            new BigInteger("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin et euismod massa. Donec tempor tristique mauris, id venenatis nisi tincidunt vitae. Proin vestibulum arcu in massa finibus, sed laoreet nunc condimentum. Aliquam ut ligula quis nisi condimentum porttitor. Etiam sodales sem odio. Integer elementum libero tincidunt leo luctus, quis eleifend.".getBytes())
    };

    private final BigInteger[] ciphers = new BigInteger[] {
            new BigInteger("827890648622769666"),
            new BigInteger("392205885110326895830691999149245990491089579077451206804886133406148069015522175940211157685935661068930162482357856133319105077209332895160091335772080910232711047902859264677584979311963765367992662166389033936397635449400603076825256614042851713060871928856962993314787555880370589043928338184794049387356296738931528259633846200116880750549004562130377392887828592974165173518791914341670843229834090069024646401650034402363721534713402073448438632507589848639312943010118623914758997899636395729778491285410968937558408855529613619094294035183709252965546698832134253534733022620171961037852388003081319163320923052053777933757038694349858717829500409391211768648814070916456936853111447651454015310493274313260066117091233186304855880737334791370906402532955101589964419466144884610492033432171704716134506483390535431126495909701560332144244059285920295150692037357748825831274222803615843677645468365077253527296845271271428334660594905369875954744146110549829833298459745901819348198647660557985540336003284773914245518909539371108571386420837633643044833050039201420277247097246317709116390171146030484612295225153844573650908484553827664317197979315186192444502117591019346532700152115830333942946888504276551643103529942")
    };

    @Test
    public void generateKeysReturnsArrayOfThreeBigIntegers(){
        assertEquals(3, RSA.generateKeys(1024).length);
    }

    @Test
    public void encryptWithPreGeneratedKeysSmall() {
        assertTrue(RSA.encrypt(messages[0], keySets[0].getPk(), keySets[0].getModulus()).equals(ciphers[0]));
    }

    @Test
    public void encryptWithPreGeneratedKeysLarge() {
        assertTrue(RSA.encrypt(messages[1], keySets[1].getPk(), keySets[1].getModulus()).equals(ciphers[1]));
    }

    @Test
    public void decryptWithPreGeneratedKeysSmall() {
        assertTrue(RSA.decrypt(ciphers[0], keySets[0].getSk(), keySets[0].getModulus()).equals(messages[0]));
    }

    @Test
    public void decryptWithPreGeneratedKeysLarge() {
        assertTrue(RSA.decrypt(ciphers[1], keySets[1].getSk(), keySets[1].getModulus()).equals(messages[1]));
    }

    @Test
    public void encryptedMessageIsDifferentThanTheOriginal() {
        var m = new BigInteger("1234923849348579234857");
        var c = RSA.encrypt(m, keySets[1].getPk(), keySets[1].getModulus());
        assertFalse(m.equals(c));
    }

    @Test
    public void decryptionIsInverseOfEncryption() {
        var m = new BigInteger("1234923849348579234857");
        var c = RSA.encrypt(m, keySets[1].getPk(), keySets[1].getModulus());
        var m2 = RSA.decrypt(c, keySets[1].getSk(), keySets[1].getModulus());

        assertTrue(m.equals(m2));
    }

    @Test
    public void decryptionIsInverseOfEncryptionWithString() {
        var m = "Mily szó szökkent ki fogad kerítésin?";
        var c = RSA.encryptString(m, keySets[1].getPk(), keySets[1].getModulus());
        var m2 = RSA.decryptString(c, keySets[1].getSk(), keySets[1].getModulus());

        assertTrue(m.equals(m2));
    }

    @Test
    public void givenThatMessageEqualsWithModulusEncryptionResultsInException() {
        var message = keySets[1].getModulus();
        assertThrows(IllegalArgumentException.class, () ->
            RSA.encrypt(message, keySets[1].getPk(), keySets[1].getModulus())
        );
    }

    @Test
    public void givenThatMessageIsLargerThanModulusEncryptionResultsInException() {
        var message = keySets[1].getModulus().add(ONE);
        assertThrows(IllegalArgumentException.class, () ->
            RSA.encrypt(message, keySets[1].getPk(), keySets[1].getModulus())
        );
    }

    @Test
    public void crtDecryptWorkbookTests () {
        assertTrue(RSA.crtDecrypt(valueOf(15), valueOf(11), valueOf(5), valueOf(23)).equals(valueOf(20)));
        assertTrue(RSA.crtDecrypt(valueOf(9), valueOf(13), valueOf(7), valueOf(70)).equals(valueOf(9)));

        // a jegyzetben m = 51, ami (szerintem) hibás
        assertTrue(RSA.crtDecrypt(valueOf(5), valueOf(7), valueOf(13), valueOf(70)).equals(valueOf(59)));
    }
}
